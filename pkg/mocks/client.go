// Code generated by MockGen. DO NOT EDIT.
// Source: ../client/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	heartbeat "github.com/opsgenie/opsgenie-go-sdk-v2/heartbeat"
)

// MockedClient is a mock of Port interface
type MockedClient struct {
	ctrl     *gomock.Controller
	recorder *MockedClientMockRecorder
}

// MockedClientMockRecorder is the mock recorder for MockedClient
type MockedClientMockRecorder struct {
	mock *MockedClient
}

// NewMockedClient creates a new mock instance
func NewMockedClient(ctrl *gomock.Controller) *MockedClient {
	mock := &MockedClient{ctrl: ctrl}
	mock.recorder = &MockedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockedClient) EXPECT() *MockedClientMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockedClient) Ping(context context.Context, heartbeatName string) (*heartbeat.PingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", context, heartbeatName)
	ret0, _ := ret[0].(*heartbeat.PingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockedClientMockRecorder) Ping(context, heartbeatName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockedClient)(nil).Ping), context, heartbeatName)
}

// Get mocks base method
func (m *MockedClient) Get(context context.Context, heartbeatName string) (*heartbeat.GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", context, heartbeatName)
	ret0, _ := ret[0].(*heartbeat.GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockedClientMockRecorder) Get(context, heartbeatName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockedClient)(nil).Get), context, heartbeatName)
}

// List mocks base method
func (m *MockedClient) List(context context.Context) (*heartbeat.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", context)
	ret0, _ := ret[0].(*heartbeat.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockedClientMockRecorder) List(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockedClient)(nil).List), context)
}

// Update mocks base method
func (m *MockedClient) Update(context context.Context, request *heartbeat.UpdateRequest) (*heartbeat.HeartbeatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", context, request)
	ret0, _ := ret[0].(*heartbeat.HeartbeatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockedClientMockRecorder) Update(context, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockedClient)(nil).Update), context, request)
}

// Add mocks base method
func (m *MockedClient) Add(context context.Context, request *heartbeat.AddRequest) (*heartbeat.AddResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", context, request)
	ret0, _ := ret[0].(*heartbeat.AddResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockedClientMockRecorder) Add(context, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockedClient)(nil).Add), context, request)
}

// Enable mocks base method
func (m *MockedClient) Enable(context context.Context, heartbeatName string) (*heartbeat.HeartbeatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", context, heartbeatName)
	ret0, _ := ret[0].(*heartbeat.HeartbeatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable
func (mr *MockedClientMockRecorder) Enable(context, heartbeatName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockedClient)(nil).Enable), context, heartbeatName)
}

// Disable mocks base method
func (m *MockedClient) Disable(context context.Context, heartbeatName string) (*heartbeat.HeartbeatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", context, heartbeatName)
	ret0, _ := ret[0].(*heartbeat.HeartbeatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable
func (mr *MockedClientMockRecorder) Disable(context, heartbeatName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockedClient)(nil).Disable), context, heartbeatName)
}

// Delete mocks base method
func (m *MockedClient) Delete(context context.Context, heartbeatName string) (*heartbeat.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", context, heartbeatName)
	ret0, _ := ret[0].(*heartbeat.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockedClientMockRecorder) Delete(context, heartbeatName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockedClient)(nil).Delete), context, heartbeatName)
}
